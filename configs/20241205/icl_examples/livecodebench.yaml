- id: 0-median-of-two-sorted-arrays
  problem: |
    Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively,
    return the median of the two sorted arrays.

    The overall run time complexity should be `O(log (m+n))`.
  starter_code: |
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        pass
  solution: |
    def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:
        # Ensure nums1 is the smaller array
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        
        m, n = len(nums1), len(nums2)
        total = m + n
        half = (total + 1) // 2
        
        left, right = 0, m
        
        while left <= right:
            i = (left + right) // 2
            j = half - i
            
            nums1LeftMax = float('-inf') if i == 0 else nums1[i - 1]
            nums1RightMin = float('inf') if i == m else nums1[i]
            nums2LeftMax = float('-inf') if j == 0 else nums2[j - 1]
            nums2RightMin = float('inf') if j == n else nums2[j]
            
            if nums1LeftMax <= nums2RightMin and nums2LeftMax <= nums1RightMin:
                if total % 2 == 0:
                    return (max(nums1LeftMax, nums2LeftMax) + min(nums1RightMin, nums2RightMin)) / 2
                else:
                    return max(nums1LeftMax, nums2LeftMax)
            elif nums1LeftMax > nums2RightMin:
                right = i - 1
            else:
                left = i + 1
        
        raise ValueError("Input arrays are not sorted or not valid.")
  pseudocode_tae: |
    FUNCTION findMedianSortedArrays(nums1: LIST OF INTEGER, nums2: LIST OF INTEGER) -> FLOAT
        # Step 1: Determine the total length of the combined arrays
        total_length = LENGTH(nums1) + LENGTH(nums2)
        
        # Step 2: Determine if the total length is odd or even
        is_odd = total_length % 2 != 0
        
        # Step 3: Initialize pointers for both arrays
        index1 = 0
        index2 = 0
        current = 0
        last = 0
        
        # Step 4: Use a loop to iterate through the elements until the median position
        FOR i FROM 0 TO total_length // 2
            # Store the last value
            last = current
            
            # Compare elements from both arrays and move the pointer with the smaller value
            IF index1 < LENGTH(nums1) AND (index2 >= LENGTH(nums2) OR nums1[index1] <= nums2[index2])
                current = nums1[index1]
                index1 = index1 + 1
            ELSE
                current = nums2[index2]
                index2 = index2 + 1
        
        # Step 5: Calculate the median based on the total length
        IF is_odd
            RETURN current
        ELSE
            RETURN (last + current) / 2.0
    END FUNCTION
  pseudocode_ours_new_gpt4omini: |
    FUNCTION findMedianSortedArrays(nums1, nums2):
        SET m = LENGTH(nums1)
        SET n = LENGTH(nums2)

        IF m > n THEN:
            RETURN findMedianSortedArrays(nums2, nums1)  // Ensure nums1 is the smaller array

        SET totalLength = m + n
        SET half = totalLength // 2

        SET left = 0
        SET right = m

        WHILE left <= right DO:
            SET partition1 = (left + right) // 2
            SET partition2 = half - partition1

            SET maxLeft1 = IF partition1 == 0 THEN -INFINITY ELSE nums1[partition1 - 1]
            SET minRight1 = IF partition1 == m THEN INFINITY ELSE nums1[partition1]

            SET maxLeft2 = IF partition2 == 0 THEN -INFINITY ELSE nums2[partition2 - 1]
            SET minRight2 = IF partition2 == n THEN INFINITY ELSE nums2[partition2]

            IF maxLeft1 <= minRight2 AND maxLeft2 <= minRight1 THEN:
                // Found the correct partitions
                IF totalLength % 2 == 0 THEN:
                    RETURN (MAX(maxLeft1, maxLeft2) + MIN(minRight1, minRight2)) / 2
                ELSE:
                    RETURN MAX(maxLeft1, maxLeft2)

            ELSE IF maxLeft1 > minRight2 THEN:
                // Move towards the left in nums1
                SET right = partition1 - 1
            ELSE:
                // Move towards the right in nums1
                SET left = partition1 + 1

        // If we reach here, it means the input arrays were not sorted
        RETURN -1  // This line should never be reached if inputs are valid
  pseudocode_ours_new: |
    Algorithm findMedianSortedArrays(nums1, nums2):
        1. Initialize two pointers i and j to 0 for nums1 and nums2 respectively.
        2. Calculate the total length of the combined arrays as total_length = len(nums1) + len(nums2).
        3. Determine the positions for the median:
        - If total_length is odd, set median_pos1 = total_length // 2 and median_pos2 = median_pos1.
        - If total_length is even, set median_pos1 = total_length // 2 - 1 and median_pos2 = median_pos1 + 1.
        4. Initialize two variables median1 and median2 to None.
        5. Use a loop to iterate until we reach the median positions:
        - Compare elements of nums1 and nums2 using the pointers i and j.
        - If nums1[i] is less than or equal to nums2[j] or j is out of bounds:
            - Check if the current position is median_pos1 or median_pos2.
            - Update median1 or median2 if the current position matches.
            - Increment i.
        - Else:
            - Check if the current position is median_pos1 or median_pos2.
            - Update median1 or median2 if the current position matches.
            - Increment j.
        6. After the loop, if total_length is odd, return median1.
        7. If total_length is even, return the average of median1 and median2.
  pseudocode: |
    function findMedianSortedArrays(nums1, nums2):
        # Determine the total length of both arrays combined
        total_length = length of nums1 + length of nums2
        
        # If the total length is odd, find the middle element in the merged array
        if total_length % 2 == 1:
            return findKthElement(nums1, nums2, total_length // 2 + 1)
        else:
            # If the total length is even, find the average of the two middle elements
            left_mid = findKthElement(nums1, nums2, total_length // 2)
            right_mid = findKthElement(nums1, nums2, total_length // 2 + 1)
            return (left_mid + right_mid) / 2.0

    function findKthElement(nums1, nums2, k):
        index1 = 0
        index2 = 0
        
        while True:
            # If nums1 is exhausted, return the k-th element from nums2
            if index1 == length of nums1:
                return nums2[index2 + k - 1]
            # If nums2 is exhausted, return the k-th element from nums1
            if index2 == length of nums2:
                return nums1[index1 + k - 1]
            # If k is 1, return the minimum of the current elements
            if k == 1:
                return minimum(nums1[index1], nums2[index2])
            
            # Calculate new indices in both arrays
            new_index1 = minimum(index1 + k // 2 - 1, length of nums1 - 1)
            new_index2 = minimum(index2 + k // 2 - 1, length of nums2 - 1)
            
            # Compare elements at new indices
            if nums1[new_index1] <= nums2[new_index2]:
                # Move forward in nums1
                k -= (new_index1 - index1 + 1)
                index1 = new_index1 + 1
            else:
                # Move forward in nums2
                k -= (new_index2 - index2 + 1)
                index2 = new_index2 + 1
  pseudocode_2: |
    function findMedianSortedArrays(nums1, nums2):
        # Determine the total length of both arrays combined
        totalLength = length of nums1 + length of nums2
        
        # Determine if the total length is odd
        isOdd = (totalLength % 2 == 1)
        
        # Function to find the k-th element in two sorted arrays
        function findKthElement(k, array1, array2):
            index1 = 0
            index2 = 0
            
            # Loop until we find the k-th element
            while True:
                # If one array is exhausted, return the k-th element from the other array
                if index1 == length of array1:
                    return array2[index2 + k - 1]
                if index2 == length of array2:
                    return array1[index1 + k - 1]
                
                # If k is 1, return the minimum of the current elements of both arrays
                if k == 1:
                    return minimum(array1[index1], array2[index2])
                
                # Calculate new indices in both arrays
                newIndex1 = minimum(index1 + k // 2 - 1, length of array1 - 1)
                newIndex2 = minimum(index2 + k // 2 - 1, length of array2 - 1)
                pivot1 = array1[newIndex1]
                pivot2 = array2[newIndex2]
                
                # Move forward in the array with the smaller pivot
                if pivot1 <= pivot2:
                    k -= (newIndex1 - index1 + 1)
                    index1 = newIndex1 + 1
                else:
                    k -= (newIndex2 - index2 + 1)
                    index2 = newIndex2 + 1
        
        # If total length is odd, find the middle element of the merged array
        if isOdd:
            return findKthElement((totalLength // 2) + 1, nums1, nums2)
        else:
            # If total length is even, find the average of the two middle elements
            leftMid = findKthElement(totalLength // 2, nums1, nums2)
            rightMid = findKthElement(totalLength // 2 + 1, nums1, nums2)
            return (leftMid + rightMid) / 2.0
  ranking_pc: |
    The correct pseudocode solution for the problem is Pseudocode 1. This pseudocode effectively handles the task of finding the median of two sorted arrays by using a helper function `findKthElement` to find the k-th smallest element in the merged array. It correctly manages edge cases such as when one of the arrays is exhausted, and it efficiently reduces the problem size by approximately half in each recursive step, aiming for a logarithmic time complexity. The logic for handling both odd and even total lengths of the combined arrays is also correctly implemented.
  tc_input: |
    [1, 3, 5]
    [2, 4, 6]
  tc_output: |
    ## Reasoning

    Given the arrays `nums1 = [1, 3, 5]` and `nums2 = [2, 4, 6]`, we need to find the median of the combined sorted array.

    1. **Combine and Sort the Arrays**: If we were to combine and sort `nums1` and `nums2`, the resulting array would be `[1, 2, 3, 4, 5, 6]`.

    2. **Determine the Length**: The total length of the combined array is 6, which is even.

    3. **Find the Median for Even Length**: For an array of even length, the median is the average of the two middle numbers. In this case, the middle numbers are the 3rd and 4th elements of the sorted array, which are `3` and `4`.

    4. **Calculate the Median**: The median is `(3 + 4) / 2 = 3.5`.

    Thus, the median of the arrays `nums1` and `nums2` is `3.5`.

    ```
    3.5
    ```
  tc_output_vanilla: |
    ```
    3.5
    ```
  